module SPI_mstr_tb();

// DUT stimulus
logic [15:0] rd_data_out,		// data recevied from slave device
	     cmd;			// data to send to slave device
logic done,				// transaction is complete
      SS_n,				// Select for slave device
      MOSI,				// Master out slave in
      SCLK,				// Clk generated by master
      wrt,				// to start transaction
      MISO,				// Master in slave out
      clk,				// system clk, 50MHz
      rst_n,				// asych reset
      rdy;				

// instantiation of SPI master and slave device
SPI_mstr iDUT1(.rd_data(rd_data_out), .done(done), .SS_n(SS_n), .MOSI(MOSI), .SCLK(SCLK), .wrt(wrt), .cmd(cmd), .MISO(iDUT2.MISO), .clk(clk), .rst_n(rst_n));

SPI_slave iDUT2(.clk(clk),.rst_n(rst_n),.SS_n(iDUT1.SS_n),.SCLK(iDUT1.SCLK),.MISO(MISO),.MOSI(iDUT1.MOSI),.rdy(rdy));

initial begin
clk = 0;		// initatilze clock
rst_n = 0;		// assert reset
cmd = 16'hED83;		// initatlize data packet to send to slave device
repeat (3)@(posedge clk);	// wait 3 clock cycles
@(negedge clk) rst_n = 1;	// deassert reset
wrt = 1;			// proceed with transaction
@(negedge clk) wrt = 0;		// deassert wrt as transaction has already started
repeat (1028) @(negedge clk);	// wait for 1028 clock cycles (rnd number) / should output 16'hABCD from slave
wrt = 1;			// reassert wrt to start transaction again
@(negedge clk) wrt = 0;		// deassert wrt as transaction started already
repeat (1028) @(negedge clk);	// wait for 1028 clock cycles / should output 16'hED83 on rd_data_out

$stop;
end

// clock generation
always
# 5 clk = ~clk;

endmodule
